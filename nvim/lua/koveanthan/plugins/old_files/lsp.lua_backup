return {
	"VonHeikemen/lsp-zero.nvim",
	branch = "v3.x",
	dependencies = {
		--- Uncomment these if you want to manage the language servers from neovim
		-- LSP Support
		{ "neovim/nvim-lspconfig" },
		{ "williamboman/mason.nvim" },
		{ "williamboman/mason-lspconfig.nvim" },

        { "nvm-telescope/telescope.nvim" },

		-- Autocompletion
		{ "hrsh7th/nvim-cmp" },
		{ "hrsh7th/cmp-nvim-lsp" },
		{ "hrsh7th/cmp-buffer" },
		{ "hrsh7th/cmp-path" },
		{ "hrsh7th/cmp-nvim-lua" },

		-- Snippets
		{ "saadparwaiz1/cmp_luasnip" },
		{ "L3MON4D3/LuaSnip" },
		{ "rafamadriz/friendly-snippets" },

		-- LSP Tools
		{ "simrat39/rust-tools.nvim" },
	},
	config = function()
		local lsp_zero = require("lsp-zero")
        local builtin = require("telescope.builtin")
		lsp_zero.preset("recommended")

		lsp_zero.on_attach(function(_, bufnr)
			local opts = { buffer = bufnr, remap = false }

			vim.keymap.set("n", "gd", function()
				vim.lsp.buf.definition()
			end, opts)
			vim.keymap.set("n", "K", function()
				vim.lsp.buf.hover()
			end, opts)
			vim.keymap.set("n", "<leader>vt", function()
                builtin.lsp_definitions()
			end, opts)
			vim.keymap.set("n", "<leader>vs", function()
                builtin.lsp_document_symbols()
			end, opts)
			vim.keymap.set("n", "<leader>vws", function()
				vim.lsp.buf.workspace_symbol()
			end, opts)
			vim.keymap.set("n", "<leader>vd", function()
				vim.diagnostic.open_float()
			end, opts)
			vim.keymap.set("n", "[d", function()
				vim.diagnostic.goto_next()
			end, opts)
			vim.keymap.set("n", "]d", function()
				vim.diagnostic.goto_prev()
			end, opts)
			vim.keymap.set("n", "[w", function()
				vim.diagnostic.goto_next({
                    severity = vim.diagnostic.severity["WARN"]
                })
			end, opts)
			vim.keymap.set("n", "]w", function()
				vim.diagnostic.goto_prev({
                    severity = vim.diagnostic.severity["WARN"]
                })
			end, opts)
			vim.keymap.set("n", "[e", function()
				vim.diagnostic.goto_next({
                    severity = vim.diagnostic.severity["ERROR"]
                })
			end, opts)
			vim.keymap.set("n", "]e", function()
				vim.diagnostic.goto_prev({
                    severity = vim.diagnostic.severity["ERROR"]
                })
			end, opts)
			vim.keymap.set("n", "<leader>vca", function()
				vim.lsp.buf.code_action()
			end, opts)
			vim.keymap.set("n", "<leader>vr", function()
				vim.lsp.buf.references()
			end, opts)
			vim.keymap.set("n", "<leader>vi", function()
				vim.lsp.buf.implementation()
			end, opts)
			vim.keymap.set("n", "<leader>vn", function()
				vim.lsp.buf.rename()
			end, opts)
			vim.keymap.set("n", "<leader>vh", function()
				vim.lsp.buf.signature_help()
			end, opts)
		end)

		require("mason").setup()
		require("mason-lspconfig").setup({
            ensure_installed = {},
        })

		require("mason-lspconfig").setup_handlers({
			-- The first entry (without a key) will be the default handler
			-- and will be called for each installed server that doesn't have
			-- a dedicated handler.
			function(server_name) -- default handler (optional)
				require("lspconfig")[server_name].setup({})
			end,
			-- Next, you can provide a dedicated handler for specific servers.
			-- For example, a handler override for the `rust_analyzer`:
			["rust_analyzer"] = function()
				require("rust-tools").setup({})
			end,
		})
		local cmp = require("cmp")
		local cmp_select = { behavior = cmp.SelectBehavior.Select }

		require("luasnip.loaders.from_vscode").lazy_load()

		cmp.setup({
			sources = {
				{ name = "path" },
				{ name = "buffer", keyword_length = 3 },
				{ name = "luasnip", keyword_length = 2 },
				{ name = "nvim_lsp" },
				{ name = "nvim_lua" },
			},
			formatting = lsp_zero.cmp_format(),
			mapping = cmp.mapping.preset.insert({
				["<C-p>"] = cmp.mapping.select_prev_item(cmp_select),
				["<C-n>"] = cmp.mapping.select_next_item(cmp_select),
				["<C-y>"] = cmp.mapping.confirm({ select = true }),
				["<C-Space>"] = cmp.mapping.complete(),
			}),
		})
	end,
}
